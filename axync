#!/usr/bin/env python

import sys
import os
from subprocess import call, Popen, PIPE

program = sys.argv[0]
formatting = {
    "bold": "\x1b[1m",
    "normal": "\x1b[0m", 
}


if call(["/usr/bin/which", "-s", "kqwait"]) != 0:
    print("""
%(bold)skqwait%(normal)s not found. Maybe get and compile it:
%(bold)s
$ git clone https://github.com/sschober/kqwait.git kqwait
$ cd kqwait; make
$ cp kqwait /usr/local/bin
%(normal)s
But get Xcode first! Install it from App Store. It's free. Good luck!
""" % formatting)
    exit(1)


def run():
    n = len(sys.argv)
    command = sys.argv[1] if n > 1 else ""
    if not command in ['list', 'start', 'stop', 'stopall', 'agent'] \
            or (command == "list"      and n != 2) \
            or (command == "start"       and n < 4) \
            or (command == "stop"    and n < 3) \
            or (command == "stopall" and n != 2) \
            or (command == "agent"     and n < 4) \
            :
        command = "usage"

    globals()[command]()


def usage():
    print("""
%(bold)sAXYNC%(normal)s (OS %(bold)sX%(normal)s %(bold)sA%(normal)s\
utomatic %(bold)sRSYNC%(normal)s)

Watch filesystem paths and start rsync on any changes.

Usage: %(bold)saxync <command> <arguments>%(normal)s where command and \
arguments are:

  %(bold)slist%(normal)s
    List the currently active axync watches with their IDs.

  %(bold)sstart [<options>] <local>... <remote>%(normal)s
    Transfer <local> paths immediately to <remote> with rsync. <options> are
    passed to rsync unchanged. If this is successful install a file system
    watcher and rerun same transfer whenever a file changes.

  %(bold)sstop {<pid>}%(normal)s
    Stop the watcher(s). The PIDs are listed in command %(bold)slist%(normal)s.

  %(bold)sstopall%(normal)s
    Stop %(bold)sall%(normal)s watchers.
""" % formatting)
    exit(0)


def list():
    def print_agent(time, pid, arguments):
        _, _, arguments = arguments.split(None, 2)

        print((""
                + "Agent PID %(bold)s%(pid)s%(normal)s"
                + " running for %(bold)s%(time)s%(normal)s"
                + "\n    %(bold)saxync add %(arguments)s%(normal)s"
            ) % dict({
                "pid": pid,
                "time": time,
                "arguments": arguments,
            }, **formatting)
        )

    command = "ps -o etime -f -u `whoami`"
    output = Popen(["sh", "-c", command], stdout=PIPE).communicate()[0]
    for line in output.rstrip().split("\n"):
        time, _, pid, _, _, _, _, _, arguments = line.split(None, 8)
        if arguments.startswith("python " + program + " agent"):
            print_agent(time, pid, arguments)


def start():
    pass
    # invoke itself asynchronously with command agent


def stop():
    pass
    # kill agents


def stopall():
    pass
    # list() then kill all agents


# Undocumented agent command
def agent():
    pass


run()

